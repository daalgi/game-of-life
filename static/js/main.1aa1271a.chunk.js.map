{"version":3,"sources":["Components/Controls/index.js","Components/SideBar/index.js","utils.js","Components/App.js","index.js"],"names":["className","run","step","pencil","onPencilToggle","onPlayStop","onClearGrid","speed","onChangeSpeed","onClick","style","width","marginLeft","Slider","defaultValue","valueLabelDisplay","min","max","marks","onChange","e","value","id","onRandomGrid","onGliderGrid","onGosperGliderGun","liveNeighbours","grid","size","i","currIndex","sum","rows","cols","row","parseInt","col","emptyGrid","Array","fill","map","v","randomGrid","prob","Math","random","gridWithLiveCells","liveCells","CELL_WIDTH","App","useState","gridSize","setGrid","setStep","setSpeed","canvasRef","useRef","contextRef","setRun","setPencil","isMouseDown","setIsMouseDown","useEffect","canvas","current","height","ctx","getContext","scale","lineCap","strokeStyle","lineWidth","fillStyle","interval","setInterval","handleUpdateGrid","clearInterval","x","y","fillRect","window","innerWidth","innerHeight","length","GRID_STROKE","newGrid","neighbours","handleEditCell","nativeEvent","offsetX","offsetY","floor","handleMouseMove","href","target","Controls","SideBar","push","glider","gosperGliderGun","ref","onMouseDown","onMouseMove","onMouseUp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aa1271a.chunk.js","sourcesContent":["import Slider from '@material-ui/core/Slider'\r\n\r\nimport './styles.css'\r\n\r\nexport default ({\r\n    className,\r\n    run,\r\n    step,\r\n    pencil,\r\n    onPencilToggle,\r\n    onPlayStop,\r\n    onClearGrid,\r\n    speed,\r\n    onChangeSpeed\r\n}) => {\r\n\r\n    return (\r\n        <section className={className}>\r\n            <div className=\"btn\" onClick={onPlayStop}>\r\n                {run ? \"Stop\" : \"Play\"}\r\n            </div>\r\n            <div className=\"btn\" onClick={onClearGrid}>Clear Grid</div>\r\n            <div className=\"btn\" onClick={onPencilToggle}>\r\n                Pencil {pencil ? \"On\" : \"Off\"}\r\n            </div>\r\n            <div>\r\n                <p style={{ width: \"180px\", marginLeft: \"16px\" }}>\r\n                    Update period: {speed} ms\r\n                </p>\r\n                <Slider\r\n                    defaultValue={500}\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={50}\r\n                    min={50}\r\n                    max={1000}\r\n                    marks\r\n                    style={{ width: \"180px\", marginLeft: \"16px\" }}\r\n                    onChange={(e, value) => onChangeSpeed(value)}\r\n                />\r\n            </div>\r\n            <p id=\"controls-step-p\">Step: {step}</p>\r\n        </section>\r\n    )\r\n}","import './styles.css'\r\n\r\nexport default ({\r\n    className,\r\n    onRandomGrid,\r\n    onGliderGrid,\r\n    onGosperGliderGun\r\n}) =>\r\n    <div className={className}>\r\n        <div className=\"btn-sidebar\" onClick={onRandomGrid}>Random grid</div>\r\n        <div className=\"btn-sidebar\" onClick={onGliderGrid}>Glider</div>\r\n            <div className=\"btn-sidebar\" onClick={onGosperGliderGun}>Gosper glider gun</div>\r\n    </div>","const liveNeighbours = (grid, size, i) => {\r\n    let sum = 0\r\n    const [rows, cols] = size\r\n\r\n    // Array index map to 2d array indices\r\n    let row = parseInt(i / cols)\r\n    let col = i - row * cols\r\n    // console.log('Current location:', row, col)\r\n    // Top row\r\n    let currIndex\r\n    if (row > 0) {\r\n        currIndex = (row - 1) * cols + col\r\n        // console.log('Current index:', currIndex)\r\n        if (col > 0)\r\n            // Top left (diagonal) \r\n            sum += grid[currIndex - 1] // (row - 1) * cols + col - 1\r\n        // console.log('Current sum:', sum)\r\n        // Top\r\n        sum += grid[currIndex] // (row - 1) * cols + col\r\n        // console.log('Current sum:', sum)\r\n        if (col < cols - 1)\r\n            // Top right (diagonal)\r\n            sum += grid[currIndex + 1] // (row - 1) * cols + col + 1\r\n        // console.log('Current sum:', sum)\r\n    }\r\n\r\n    // Same row\r\n    if (col > 0)\r\n        // Left\r\n        sum += grid[i - 1]\r\n    \r\n    if (col < cols - 1)\r\n        // Right\r\n        sum += grid[i + 1]\r\n\r\n    // Bottom row\r\n    if (row < rows - 1) {        \r\n        currIndex = (row + 1) * cols + col\r\n\r\n        if (col > 0)\r\n            // Bottom left (diagonal)\r\n            sum += grid[currIndex - 1] // (row + 1) * cols + col - 1\r\n        \r\n        // Bottom\r\n        sum += grid[currIndex] // (row + 1) * cols + col\r\n\r\n        if (col < cols - 1)\r\n            // Bottom right (diagonal)\r\n            sum += grid[currIndex + 1] // (row + 1) * cols + col + 1\r\n    }\r\n    // console.log('Sum:', sum)\r\n    return sum\r\n}\r\n\r\nconst emptyGrid = (rows, cols) =>\r\n    Array(rows * cols).fill(null).map(v => 0)\r\n\r\nconst randomGrid = (rows, cols, prob=0.5) => \r\n    Array(rows * cols).fill(null).map(v => \r\n        Math.random() > prob ? 0 : 1)\r\n\r\nconst gridWithLiveCells = (rows, cols, liveCells) => {\r\n    const grid = emptyGrid(rows, cols)\r\n    for (const index of liveCells) {\r\n        grid[index] = 1\r\n    }\r\n    return grid\r\n}\r\n\r\nconst glider = (row, col, gridSize) => {\r\n    const [rows, cols] = gridSize\r\n    const liveCells = []\r\n    liveCells.push(row * cols + col)\r\n    liveCells.push(row * cols + col + 1)\r\n    liveCells.push(row * cols + col + 2)\r\n    liveCells.push(row * cols + col + 2 - cols)\r\n    liveCells.push(row * cols + col + 2 - cols * 2 - 1)\r\n    return gridWithLiveCells(rows, cols, liveCells)\r\n}\r\n\r\nconst gosperGliderGun = (row, col, gridSize) => {\r\n    const [rows, cols] = gridSize\r\n    const liveCells = []\r\n    liveCells.push(cols * 5)\r\n    liveCells.push(cols * 5 + 1)\r\n    liveCells.push(cols * 6)\r\n    liveCells.push(cols * 6 + 1)\r\n\r\n    liveCells.push(cols * 5 + 10)\r\n    liveCells.push(cols * 6 + 10)\r\n    liveCells.push(cols * 7 + 10)\r\n    liveCells.push(cols * 8 + 11)\r\n    liveCells.push(cols * 9 + 12)\r\n    liveCells.push(cols * 9 + 13)\r\n\r\n    liveCells.push(cols * 4 + 11)\r\n    liveCells.push(cols * 3 + 12)\r\n    liveCells.push(cols * 3 + 13)\r\n\r\n    liveCells.push(cols * 6 + 14)\r\n\r\n    liveCells.push(cols * 4 + 15)\r\n    liveCells.push(cols * 5 + 16)\r\n    liveCells.push(cols * 6 + 16)\r\n    liveCells.push(cols * 6 + 17)\r\n    liveCells.push(cols * 7 + 16)\r\n    liveCells.push(cols * 8 + 15)\r\n\r\n    liveCells.push(cols * 3 + 20)\r\n    liveCells.push(cols * 3 + 21)\r\n    liveCells.push(cols * 4 + 20)\r\n    liveCells.push(cols * 4 + 21)\r\n    liveCells.push(cols * 5 + 20)\r\n    liveCells.push(cols * 5 + 21)\r\n    liveCells.push(cols * 2 + 22)\r\n    liveCells.push(cols * 6 + 22)\r\n\r\n    liveCells.push(cols * 1 + 24)\r\n    liveCells.push(cols * 2 + 24)\r\n    liveCells.push(cols * 6 + 24)\r\n    liveCells.push(cols * 7 + 24)\r\n\r\n    liveCells.push(cols * 3 + 34)\r\n    liveCells.push(cols * 3 + 35)\r\n    liveCells.push(cols * 4 + 34)\r\n    liveCells.push(cols * 4 + 35)\r\n\r\n    \r\n\r\n\r\n    return gridWithLiveCells(rows, cols, liveCells)\r\n}\r\n\r\nexport {\r\n    liveNeighbours,\r\n    emptyGrid,\r\n    randomGrid,\r\n    glider,\r\n    gosperGliderGun\r\n}","import { useState, useEffect, useRef } from 'react'\n\nimport Controls from './Controls'\nimport SideBar from './SideBar'\nimport {\n    liveNeighbours, emptyGrid, randomGrid, glider, gosperGliderGun\n} from '../utils'\nimport './App.css'\n\n\nconst GRID_ROWS = 38\nconst GRID_COLS = 38\nconst CELL_WIDTH = 19\nconst GRID_STROKE = 1\n\nfunction App() {\n    const [gridSize, setGridSize] = useState([GRID_ROWS, GRID_COLS])\n    const [grid, setGrid] = useState(emptyGrid(GRID_ROWS, GRID_COLS))\n    const [step, setStep] = useState(0)\n    const [speed, setSpeed] = useState(500)\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [run, setRun] = useState(false)\n    const [pencil, setPencil] = useState(false)\n    const [isMouseDown, setIsMouseDown] = useState(false)\n\n    useEffect(() => {\n        // Canvas setup\n        const canvas = canvasRef.current\n        let width = gridSize[1] * CELL_WIDTH + GRID_STROKE\n        let height = gridSize[0] * CELL_WIDTH + GRID_STROKE\n        canvas.width = width * 2\n        canvas.height = height * 2\n        canvas.style.width = `${width}px`\n        canvas.style.height = `${height}px`\n\n        const ctx = canvas.getContext(\"2d\")\n        ctx.scale(2, 2)\n        ctx.lineCap = \"round\"\n        ctx.strokeStyle = \"white\"\n        ctx.lineWidth = 5\n        ctx.fillStyle = \"hsl(0, 0%, 80%)\"\n        contextRef.current = ctx\n    }, [])\n\n    useEffect(() => {\n        // Step increase\n        let interval\n        if (run) {\n            interval = setInterval(() => setStep(step + 1), speed)\n            setGrid(handleUpdateGrid())\n        }\n        return () => clearInterval(interval)\n    }, [step])\n\n    useEffect(() => {\n        // Draw grid\n        // Note: only square grids are valid\n        const ctx = contextRef.current\n        let width = CELL_WIDTH * gridSize[1]\n        let height = CELL_WIDTH * gridSize[0]\n        let x, y\n\n        // Background\n        ctx.fillStyle = \"hsl(0, 0%, 86%)\"\n        ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)\n\n        for (let i = 0; i < grid.length; i++) {\n\n            x = (i % gridSize[1]) * CELL_WIDTH\n            y = parseInt(i / gridSize[0]) * CELL_WIDTH\n\n            // Grid\n            ctx.fillStyle = \"hsl(0, 0%, 50%)\"\n            ctx.fillRect(x, 0, GRID_STROKE, height)\n            ctx.fillRect(0, y, width, GRID_STROKE)\n\n            // Live cells\n            if (grid[i]) {\n                ctx.fillStyle = \"hsl(0, 0%, 13%)\"\n                ctx.fillRect(\n                    x + GRID_STROKE * 2,\n                    y + GRID_STROKE * 2,\n                    CELL_WIDTH - GRID_STROKE * 3,\n                    CELL_WIDTH - GRID_STROKE * 3)\n            }\n        }\n\n        // Grid last lines\n        ctx.fillStyle = \"hsl(0, 0%, 50%)\"\n        ctx.fillRect(width, 0, GRID_STROKE, height)\n        ctx.fillRect(0, height, width, GRID_STROKE)\n\n\n    }, [grid])\n\n    const handleUpdateGrid = () => {\n        const newGrid = [...grid]\n        let neighbours = 0\n        for (let i = 1; i < grid.length; i++) {\n            neighbours = liveNeighbours(grid, gridSize, i)\n            if (grid[i])\n                newGrid[i] = neighbours == 2 || neighbours == 3\n                    ? 1\n                    : 0\n            else\n                newGrid[i] = neighbours == 3 ? 1 : 0\n\n        }\n        // newGrid[1] = !newGrid[1]\n        return newGrid\n    }\n\n    const handlePlayStop = () => {\n        setRun(!run)\n        setStep(step + 1)\n    }\n\n    const handleClearGrid = () => {\n        setRun(false)\n        setStep(0)\n        setGrid(emptyGrid(...gridSize))\n    }\n\n    const handleRandomGrid = () => {\n        setRun(false)\n        setStep(0)\n        setGrid(randomGrid(...gridSize, 0.2))\n    }\n\n    const handleGliderGrid = () => {\n        setRun(false)\n        setStep(0)\n        setGrid(glider(3, 3, gridSize))\n    }\n\n    const handleGosperGliderGun = () => {\n        setRun(false)\n        setStep(0)\n        setGrid(gosperGliderGun(5, 5, gridSize))\n    }\n\n    const handlePencilToggle = () => setPencil(!pencil)\n\n    const handleMouseDown = ({ nativeEvent }) => {\n        setIsMouseDown(true)\n        pencil\n            ? handleMouseMove({ nativeEvent })\n            : handleEditCell({ nativeEvent })\n    }\n    const handleEditCell = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent\n        let row = Math.floor(offsetY / CELL_WIDTH)\n        let col = Math.floor(offsetX / CELL_WIDTH)\n        let newGrid = [...grid]\n        newGrid[row * gridSize[1] + col] ^= 1\n        setGrid(newGrid)\n    }\n\n    const handleMouseMove = ({ nativeEvent }) => {\n        if (!pencil || !isMouseDown)\n            return\n        const { offsetX, offsetY } = nativeEvent\n        let row = Math.floor(offsetY / CELL_WIDTH)\n        let col = Math.floor(offsetX / CELL_WIDTH)\n        let newGrid = [...grid]\n        newGrid[row * gridSize[1] + col] = 1\n        setGrid(newGrid)\n    }\n\n    const handleChangeSpeed = value =>\n        setSpeed(parseInt(value))\n\n    return (\n        <div className=\"app\">\n            <a id=\"logo\" href=\"https://daalgi.github.io/my-site\" target=\"_blank\">David A.G.</a>\n            <h1 id=\"title\">Conway's Game of Life</h1>\n            <Controls\n                className=\"controls\"\n                run={run}\n                step={step}\n                pencil={pencil}\n                speed={speed}\n                onChangeSpeed={handleChangeSpeed}\n                onPencilToggle={handlePencilToggle}\n                onPlayStop={handlePlayStop}\n                onClearGrid={handleClearGrid}\n            />\n            <SideBar\n                className=\"sidebar\"\n                onRandomGrid={handleRandomGrid}\n                onGliderGrid={handleGliderGrid}\n                onGosperGliderGun={handleGosperGliderGun}\n            />\n            <canvas\n                className=\"main\"\n                ref={canvasRef}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={() => setIsMouseDown(false)}\n            ></canvas>\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}